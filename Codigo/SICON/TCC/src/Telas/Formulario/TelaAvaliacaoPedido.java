/*
 * TelaAvaliacaoPedido.java
 *
 * Created on 21 de Agosto de 2008, 20:30
 */

package Telas.Formulario;

import Classes.Funcoes;
import Controller.ControllerAvaliacaoPedido;
import Telas.Componentes.MensagensDefinidas;
import Telas.Componentes.TelaInterna;
import Telas.Tabelas.ColunaBotao;
import Telas.Tabelas.JTableAvaliacaoPedido;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.mail.MessagingException;
//import javax.mail.internet.AddressException;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author  Jonathan
 */
public class TelaAvaliacaoPedido extends javax.swing.JPanel {
    
    JComboBox comboUnidade = new JComboBox();
    /** Creates new form TelaAvaliacaoPedido */
    protected JInternalFrame FrameInterno;
    private MensagensDefinidas mensagem;
    private Vector listaUnidade;
    private Vector listaSituacaoAvaliacao;
    private ControllerAvaliacaoPedido Controller;
    private Vector listaItens;
    private Vector listaItensCopia;
    private JDesktopPane TelaPrincipal;
    private ColunaBotao CellColuna;
    private JComboBox comboSituacao;
    
    private TelaMotivo telaMotivo;
    private TelaPedido telaPedido;
    private TelaInterna telaInterna;
    private boolean erro;
    
    public TelaAvaliacaoPedido() {
        initComponents();
        mensagem = new MensagensDefinidas();
        Controller = new ControllerAvaliacaoPedido();
        listaItens = new Vector();
        listaItensCopia = new Vector();
        listaUnidade = new Vector();
        listaSituacaoAvaliacao = new Vector();
        comboSituacao = new JComboBox();
        ComportamentoTela(0);
    }
    
    private void ComportamentoTela(int Comportamento) {
        switch (Comportamento) {
            case 0:
                jbtSalvar.setEnabled(false);
                jbtAlterar.setText("Alterar");
                jbtGerarArquivo.setEnabled(true);
                jbtReenviar.setEnabled(true);
                jtbAvaliacaoPedido.setEnabled(false);
                break;
            case 1:
                jbtSalvar.setEnabled(true);
                jbtAlterar.setText("Desfazer");
                jbtGerarArquivo.setEnabled(false);
                jbtReenviar.setEnabled(false);
                jtbAvaliacaoPedido.setEnabled(true);
        }            
    }
    
    public void CarregaComboUnidade(){
        listaUnidade = Controller.RetornaUnidades();
        for (Iterator<Object[]> it = listaUnidade.iterator(); it.hasNext();) {
            Object[] lista = it.next();
            comboUnidade.addItem(lista[1].toString());
        }

    }
    
    public void CarregaComboSituacao() {
        listaSituacaoAvaliacao.clear();
        listaSituacaoAvaliacao = Controller.RetornaSituacaoAvaliacao();
        for (Iterator<Vector> it = listaSituacaoAvaliacao.iterator(); it.hasNext();) {
            Vector lista = it.next();
            comboSituacao.addItem(lista.get(1).toString());
        }        
    }
        

    public ColunaBotao getCellColuna() {
        return CellColuna;
    }

    public void setCellColuna(ColunaBotao CellColuna) {
        this.CellColuna = CellColuna;
    }
    
    protected void setFrameInterno(JInternalFrame Frame){
        this.FrameInterno = Frame;
    }

    public JDesktopPane getTelaPrincipal() {
        return TelaPrincipal;
    }

    public void setTelaPrincipal(JDesktopPane TelaPrincipal) {
        this.TelaPrincipal = TelaPrincipal;
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jtbAvaliacaoPedido = new javax.swing.JTable();
        jlbTitulo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jtfPedido = new javax.swing.JTextField();
        jbtPedido = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jbtPesquisar = new javax.swing.JButton();
        jbtSalvar = new javax.swing.JButton();
        edDescFornecedor = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        edDescEntrega = new javax.swing.JTextField();
        edDescSituacao = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jbtReenviar = new javax.swing.JButton();
        jbtCancelarItem = new javax.swing.JButton();
        jbtGerarArquivo = new javax.swing.JButton();
        jbtAlterar = new javax.swing.JButton();

        setBackground(new java.awt.Color(243, 243, 243));
        setLayout(new java.awt.BorderLayout());

        jScrollPane3.setBackground(new java.awt.Color(243, 243, 243));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(452, 360));

        jtbAvaliacaoPedido.setBackground(new java.awt.Color(243, 243, 243));
        jtbAvaliacaoPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, "1", null, "Maçã", null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adequado", "Inadequado", "Nº Item", "Cod. Produto", "Produto", "Qtde", "Unidade", "Motivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtbAvaliacaoPedido.setName("jtbAvaliacaoPedido"); // NOI18N
        jtbAvaliacaoPedido.setPreferredSize(new java.awt.Dimension(600, 360));
        jScrollPane3.setViewportView(jtbAvaliacaoPedido);

        add(jScrollPane3, java.awt.BorderLayout.PAGE_END);

        jlbTitulo.setBackground(new java.awt.Color(243, 243, 243));
        jlbTitulo.setFont(new java.awt.Font("Arial", 1, 14));
        jlbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbTitulo.setText("Avaliação do Pedido");
        jlbTitulo.setPreferredSize(new java.awt.Dimension(142, 35));
        add(jlbTitulo, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(243, 243, 243));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 150));

        jCheckBox2.setBackground(new java.awt.Color(243, 243, 243));
        jCheckBox2.setText("Marcar Todos os itens como adequado");
        jCheckBox2.setName("jcbMarcarPedido"); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jtfPedido.setName("jtfPedido"); // NOI18N

        jbtPedido.setText("jButton1");
        jbtPedido.setName("jbtPedido"); // NOI18N
        jbtPedido.setPreferredSize(new java.awt.Dimension(73, 19));
        jbtPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPedidoActionPerformed(evt);
            }
        });

        jLabel23.setText("Pedido Nº");

        jbtPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Pesquisar.png"))); // NOI18N
        jbtPesquisar.setText("Pesquisar");
        jbtPesquisar.setToolTipText("Salvar as alterações feitas na tabela com os itens");
        jbtPesquisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtPesquisar.setName("jbtPesquisar"); // NOI18N
        jbtPesquisar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtPesquisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPesquisarActionPerformed(evt);
            }
        });

        jbtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/save.png"))); // NOI18N
        jbtSalvar.setText("Salvar");
        jbtSalvar.setToolTipText("Salvar as alterações feitas na tabela com os itens");
        jbtSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtSalvar.setName("jbtSalvar"); // NOI18N
        jbtSalvar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSalvarActionPerformed(evt);
            }
        });

        edDescFornecedor.setBackground(new java.awt.Color(204, 204, 204));
        edDescFornecedor.setEditable(false);
        edDescFornecedor.setFont(new java.awt.Font("Arial", 1, 11));
        edDescFornecedor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        edDescFornecedor.setName("edDescFornecedor"); // NOI18N

        jLabel24.setText("Fornecedor");

        jLabel25.setText("Previsão de Entrega");

        edDescEntrega.setBackground(new java.awt.Color(204, 204, 204));
        edDescEntrega.setEditable(false);
        edDescEntrega.setFont(new java.awt.Font("Arial", 1, 11));
        edDescEntrega.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        edDescEntrega.setName("edDescEntrega"); // NOI18N

        edDescSituacao.setBackground(new java.awt.Color(204, 204, 204));
        edDescSituacao.setEditable(false);
        edDescSituacao.setFont(new java.awt.Font("Arial", 1, 11));
        edDescSituacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        edDescSituacao.setName("edDescSituacao"); // NOI18N

        jLabel26.setText("Situação");

        jbtReenviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/enviar.PNG"))); // NOI18N
        jbtReenviar.setText("Reenviar");
        jbtReenviar.setToolTipText("Reenvie os itens que estão inadequados");
        jbtReenviar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtReenviar.setName("jbtReenviar"); // NOI18N
        jbtReenviar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtReenviar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtReenviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtReenviarActionPerformed(evt);
            }
        });

        jbtCancelarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/delete.png"))); // NOI18N
        jbtCancelarItem.setText("Cancelar item");
        jbtCancelarItem.setToolTipText("Cancele um item");
        jbtCancelarItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtCancelarItem.setName("jbtReenviar"); // NOI18N
        jbtCancelarItem.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtCancelarItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtCancelarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCancelarItemActionPerformed(evt);
            }
        });

        jbtGerarArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/excel.PNG"))); // NOI18N
        jbtGerarArquivo.setText("Gerar Arquivo");
        jbtGerarArquivo.setToolTipText("Gere o arquivo para ser reenviado os itens com problemas");
        jbtGerarArquivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtGerarArquivo.setName("jbtGerarArquivo"); // NOI18N
        jbtGerarArquivo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtGerarArquivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtGerarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGerarArquivoActionPerformed(evt);
            }
        });

        jbtAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/alterar.png"))); // NOI18N
        jbtAlterar.setText("Alterar");
        jbtAlterar.setToolTipText("Salvar as alterações feitas na tabela com os itens");
        jbtAlterar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtAlterar.setName("jbtAlterar"); // NOI18N
        jbtAlterar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtAlterar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addContainerGap(598, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jbtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtGerarArquivo)
                        .addGap(4, 4, 4)
                        .addComponent(jbtReenviar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtCancelarItem)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edDescFornecedor, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jtfPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edDescSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addGap(3, 3, 3)
                                .addComponent(edDescEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(73, 73, 73))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtPesquisar)
                    .addComponent(jbtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtReenviar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtGerarArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtCancelarItem)
                    .addComponent(jbtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edDescEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edDescSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edDescFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jCheckBox2))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jCheckBox2ActionPerformed

public void CarregaPesquisa(){
    listaItens = (Vector)Controller.Pesquisa(Integer.parseInt(jtfPedido.getText()));
    CarregarBotaoTabela();
    setJTable();    
}
private void jbtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPesquisarActionPerformed
    if (jtfPedido.getText().trim().equals("")) {
        mensagem.ExibirMensagem(20);
    } else {
        CarregaPesquisa();
    }
}//GEN-LAST:event_jbtPesquisarActionPerformed
    /**
     * Verifica se os campos foram todos preenchidos antes de executar o comando de salvar
     * @return ArrayList 1ª posição = itens que não estão setados nem como adequado e nem com inadequado
     *                   2ª posição = itens que estão setados como inadequados mas que não foi escolhido um 
     *                                motivo;                   
     */
    private ArrayList VerificaObrigatoriedade() {
        ArrayList listaErro = new ArrayList(2);
        StringBuffer sb1 = new StringBuffer();
        StringBuffer sb2 = new StringBuffer();
        for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
            Vector linhaItem = it.next();
            if ((!(Boolean)linhaItem.get(0)) && (!(Boolean)linhaItem.get(1))) {
                sb1.append(", " + linhaItem.get(2).toString());
            } else if ((Boolean)linhaItem.get(1)) {
                if ((linhaItem.get(2).toString().equals("")) || (((JButton)linhaItem.get(9)).getText().equals(""))) {
                    sb2.append(", " + linhaItem.get(2).toString());
                }
            }           
        }
        String s1 = sb1.toString();
        String s2 = sb2.toString();
        if (!s1.equals("")) {
            listaErro.add(s1.substring(1));
        } else {
            listaErro.add(s1);
        }
        if (!s2.equals("")) {
            listaErro.add(s2.substring(1));
        } else {
            listaErro.add(s2);
        }     
        return listaErro;
    }
    
    /**
     * Compara se os motivos passados como parametro possuem o atibuto baixar iguais
     * @param idMotivoAntigo Motivo da listaItensCopia
     * @param idMotivoNovo Motivo Novo
     * @return boolean com a comparação
     */
    private int VerificaMotivoMudou(String idMotivoAntigo, String idMotivoNovo, Vector listaMotivo) {
        int retorno = 0;
        if (idMotivoAntigo.equals(idMotivoNovo)) {
            return retorno;
        } else {
            boolean BaixaAntiga = false;
            boolean BaixaNova = false;
            for (Iterator<Object[]> it = listaMotivo.iterator(); it.hasNext();) {
                Object[] motivo = it.next();
                if (motivo[0].toString().equals(idMotivoNovo)) {
                    BaixaNova = (Boolean) motivo[1];
                    for (Iterator<Object[]> itAntigo = listaMotivo.iterator(); itAntigo.hasNext();) {
                        Object[] motivo2 = itAntigo.next();
                        if (motivo2[0].toString().equals(idMotivoAntigo)) {
                            BaixaAntiga = (Boolean) motivo2[1];
                        }
                    }
                }
            }
            if (BaixaAntiga != BaixaNova) {
                if (BaixaNova) {
                    retorno = 4;
                } else {
                    retorno = 3;
                }
            } else {
                retorno = 0;
            }
        }
        return retorno;
    }    

    /**
     * Carrega apenas os itens que sofreram mudanças para gravar na tabela itemavaliacao
     * @return ArrayList contendo arraylists com o formato
     *         idItemPedido, data da gravação, id do motivo, situação e se é adequado;
     */
    private ArrayList CarregaItensGravar() {
        Vector listaMotivo = MotivoSelecionados();
        ArrayList listaGravar = new ArrayList();
        Boolean Adicionar = false;
        int TipoMudanca = 0;
        for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
            Vector lista = it.next();
            ArrayList item = new ArrayList();
            for (Iterator<Object[]> itCopia = listaItensCopia.iterator(); itCopia.hasNext();) {
                Object[] listaCopia = itCopia.next();
                if ((!(Boolean)listaCopia[0]) && (!(Boolean)listaCopia[1])) {
                    TipoMudanca = 0;
                    Adicionar = true;
                } else if (lista.get(0) != listaCopia[0]) {
                    Adicionar = true;
                    if ((Boolean) lista.get(0)) {
                        TipoMudanca = 1;
                    } else {
                        TipoMudanca = 2;
                    }
                } else if (!((JButton) lista.get(9)).getText().equals(((JButton) listaCopia[9]).getText())) {
                    TipoMudanca = VerificaMotivoMudou(((JButton) listaCopia[9]).getText(), ((JButton) lista.get(9)).getText(), listaMotivo);
                    if (TipoMudanca == 0) {
                        Adicionar = false;
                    } else {
                        Adicionar = true;
                    }
                }
            }
            if (Adicionar) {
                item.add(lista.get(2));
                GregorianCalendar data = new GregorianCalendar();
                item.add(new Timestamp(data.getTimeInMillis()));
                if (TipoMudanca != 1) {
                    item.add(((JButton) lista.get(9)).getText());
                } else item.add("");                
                item.add(lista.get(8).toString());
                item.add(lista.get(0));
                item.add(TipoMudanca);
                listaGravar.add(item);   
            }
        }
        return listaGravar;
    }
    
    public Boolean VerificaMotivoBaixar(Vector listamotivo, String id) {
        for (Iterator<Object[]> it = listamotivo.iterator(); it.hasNext();) {
            Object[] motivo = it.next();
            if ((Integer)motivo[0] == Integer.parseInt(id)) {
                return (Boolean)motivo[1];
            }            
        }
        return false;
    }
        
    
    public ArrayList CarregarItensGravarReenviado(){
        Vector listaMotivo = MotivoSelecionados();
        ArrayList listaGravar = new ArrayList();
        
        int TipoMudanca = 0;
        for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
            Vector lista = it.next();
            ArrayList item = new ArrayList();
            if (!VerificaMotivoBaixar(listaMotivo, ((JButton) lista.get(9)).getText())) {
                item.add(lista.get(2));
                GregorianCalendar data = new GregorianCalendar();
                item.add(new Timestamp(data.getTimeInMillis()));
                if (TipoMudanca != 1) {
                    item.add(((JButton) lista.get(9)).getText());
                } else item.add("");                
                item.add(lista.get(8).toString());
                item.add(lista.get(0));
                item.add(0);
                listaGravar.add(item);                   
            }
        }
        return listaGravar;        
    }
    /**
     * Carrega uma cópia dos itens na tabela
     */
    private void SetListaItensCopia(){
        listaItensCopia.clear();
        int i = 0;
        while (i < listaItens.size()) {    
            Object[] obj = new Object[10];
            obj = ((Vector)listaItens.get(i)).toArray();
            JButton botao = new JButton();
            botao.setText(((JButton)((Vector)listaItens.get(0)).get(9)).getText());
            obj[9] = botao;
            listaItensCopia.add(obj);           
            i++;
        }
        /*for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
            Vector lista = it.next();
            listaItensCopia.add(lista);           
        }  */     
    }  
    
private void jbtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSalvarActionPerformed
    Salvar();
    CarregaPesquisa();
    ComportamentoTela(0);
}//GEN-LAST:event_jbtSalvarActionPerformed

public void Salvar() {
    ArrayList listaErro = VerificaObrigatoriedade();
    erro = false;
    if (!listaErro.get(0).equals("")) {
        mensagem.ExibirMensagemPersonalizada("Deve ser indicado a avaliação do item. Itens sem avaliação: " + listaErro.get(0), 1);
        erro = true;
    }
    if (!listaErro.get(1).equals("")) {
        mensagem.ExibirMensagemPersonalizada("Quando um item é inadequado deve ser indicado o motivo e a situacao. Itens sem essas informações: " + listaErro.get(1), 1);
        erro = true;
    }
    if (!erro) {
            try {
                ArrayList listaGravar =  CarregaItensGravar();
                if (listaGravar.isEmpty()) {
                    mensagem.ExibirMensagem(25);
                } else {
                    Controller.GravarAvaliacao(listaGravar, false);
                    mensagem.ExibirMensagem(2);
                }
            } catch (SQLException ex) {
                mensagem.ExibirMensagem(3);
                erro = true;
                ex.printStackTrace();
            } catch (Exception ex) {
                mensagem.ExibirMensagem(3);
                ex.printStackTrace();
                erro = true;
            }
    }    
}
private void jbtPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPedidoActionPerformed
    InstaciaTelaPedido();
}//GEN-LAST:event_jbtPedidoActionPerformed
/*
private void jbtReenviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtReenviarActionPerformed
    StringBuffer PedidoErrado = new StringBuffer();
        StringBuffer PedidoNaoEncontrado = new StringBuffer();
        StringBuffer PedidoEnviado = new StringBuffer();
        StringBuffer PedidoProblemaEnvio = new StringBuffer();        
                Integer id = Integer.parseInt(jtfPedido.getText());
                    try {  
                        Controller.GravarAvaliacao(CarregarItensGravarReenviado(), true);
                        Controller.EventoEnviar(id);
                        PedidoEnviado.append(id.toString());    
                        PedidoEnviado.append(", ");    
                        CarregaPesquisa();
                    } 
                    catch  (FileNotFoundException e) {
                        System.out.println(e.getMessage());
                        PedidoNaoEncontrado.append(id.toString());
                        PedidoNaoEncontrado.append(", ");
                    }
                    catch  (AddressException e) {
                        System.out.println(e.getMessage());
                        PedidoProblemaEnvio.append(id.toString());
                        PedidoProblemaEnvio.append(", ");                        
                    }
                    catch  (MessagingException e) {
                        System.out.println(e.getMessage());
                        PedidoProblemaEnvio.append(id.toString());
                        PedidoProblemaEnvio.append(", ");   
                    }
                    catch (Exception e) {
                        System.out.println(e.getMessage());
                        PedidoProblemaEnvio.append(id.toString());
                        PedidoProblemaEnvio.append(", ");
                    }                        
        if (PedidoEnviado.length() > 0) {
            mensagem.ExibirMensagemPersonalizada("O(s) item(ns) do pedido " + PedidoEnviado.toString().substring(0, PedidoEnviado.length() - 2) + " que apresentou(ram) problema(s) foi(ram) reenviado(s) com sucesso.", 2);            
        }
        if (PedidoNaoEncontrado.length() > 0) {
            mensagem.ExibirMensagemPersonalizada("O(s) pedido(s) " + PedidoNaoEncontrado.toString().substring(0, PedidoNaoEncontrado.length() - 2) + " não foi(ram) encontrado(s).", 1);            
        }        
        if (PedidoProblemaEnvio.length() > 0) {
            mensagem.ExibirMensagemPersonalizada("O(s) pedido(s) " + PedidoProblemaEnvio.toString().substring(0, PedidoProblemaEnvio.length() - 2) + " apresentou(ram) problema(s) durante o processo.", 1);            
        }
        if (PedidoErrado.length() > 0) {
            mensagem.ExibirMensagemPersonalizada("O(s) pedido(s) " + PedidoErrado.toString().substring(0, PedidoErrado.length() - 2) + " já foi(ram) enviado(s) ao fornecedor", 1);            
        }    
}//GEN-LAST:event_jbtReenviarActionPerformed

private void jbtCancelarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCancelarItemActionPerformed
        try {
            Controller.CancelarItem((Vector) listaItens.get(jtbAvaliacaoPedido.getSelectedRow()));//GEN-LAST:event_jbtCancelarItemActionPerformed
            mensagem.ExibirMensagem(22);
        } catch (SQLException ex) {
            mensagem.ExibirMensagem(23);
        } catch (Exception ex) {
            mensagem.ExibirMensagem(24);
        }
}

private void jbtGerarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGerarArquivoActionPerformed
    try {
        if (!erro) {
            Controller.GerarArquivo(GeraVectorArquivo());
            mensagem.ExibirMensagem(26);
        } else {
            mensagem.ExibirMensagem(21);        
        }
    } catch (Exception e) {
        //mensagem.ExibirMensagem(21);
        e.printStackTrace();
    }
}//GEN-LAST:event_jbtGerarArquivoActionPerformed

private void jbtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlterarActionPerformed
    if (jbtAlterar.getText().equals("Alterar")) {
        SetListaItensCopia();
        ComportamentoTela(1);
    } else {
        ComportamentoTela(0);
    }
}//GEN-LAST:event_jbtAlterarActionPerformed
/**
 * captura todos os motivos que estão na tabela
 * @return String para fazer a consulta no banco
 */
private String RetornaMotivo() {
    StringBuffer sb = new StringBuffer();
    for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
        Vector lista = it.next();
        if (!((JButton)lista.get(9)).getText().trim().equals("")) {
            sb.append("," + ((JButton)lista.get(9)).getText());
        }
    }
    for (Iterator<Object[]> it = listaItensCopia.iterator(); it.hasNext();) {
        Object[] listaAntiga = it.next();
        if (!((JButton)listaAntiga[9]).getText().trim().equals("")) {
            sb.append("," + ((JButton)listaAntiga[9]).getText());
        }
    }
    if (sb.toString().equals("")) {
        return "";
    } else {
        return sb.toString().substring(1);
    }
    
}

/**
 * Retorna um vector com todos so motivos selecionados na grid
 * @return um array com o id do motivo e se é para baixar ou não
 */
private Vector MotivoSelecionados() {
    String idsMotivos = RetornaMotivo();
    Vector lista = new Vector();
    if (!idsMotivos.equals("")) {
        lista = (Vector) Controller.RetornaMotivoAvaliacao(idsMotivos);
    }    
    return lista;
}

private Vector GeraVectorArquivo() throws Exception {
    Vector listaArquivo = new Vector();
    Vector listaMotivoSel = MotivoSelecionados();
    for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
        Vector lista = it.next();
        Vector listaitem = new Vector();
        Integer idMotivo = Integer.parseInt(((JButton)lista.get(9)).getText());
        for (Iterator<Object[]> it2 = listaMotivoSel.iterator(); it2.hasNext();) {
            Object[] listamo = it2.next();
            Integer id = (Integer)listamo[0];
            if ((id.equals(idMotivo)) && (!(Boolean) listamo[1]))  {
                listaitem.add(lista.get(3).toString());
                listaitem.add(lista.get(4).toString());
                listaitem.add(lista.get(5).toString());
                listaitem.add(lista.get(6).toString());
                listaitem.add(edDescEntrega.getText());
                listaitem.add(jtfPedido.getText());
                listaArquivo.add(listaitem);
            }
            
        }
    }
    return listaArquivo;    
}

/**
 * Função com o intuito de verificar se, quando clicar no botão cancelar item, 
 * o item está baixado ou não.
 * @return boolean se esta baixado ou não;
 */
private boolean VerificaTipoSaldo() {
    Vector item = ((Vector)listaItens.get(jtbAvaliacaoPedido.getSelectedRow()));
    boolean baixado = false;
    if ((Boolean)item.get(0) == true) {
        baixado = true;
    } return Controller.VerificaMotivoBaixa(Integer.parseInt(((JButton)item.get(7)).getText()));
}


private void CarregarBotaoTabela(){
    for (Iterator<Vector> it = listaItens.iterator(); it.hasNext();) {
        Vector item = it.next();
            item.add(new JButton(item.get(7).toString()));
    }
}

public void setJTable(){
    jtbAvaliacaoPedido.setModel(new JTableAvaliacaoPedido((listaItens)));
    CarregaComboSituacao();
    TableColumn colSituacao = jtbAvaliacaoPedido.getColumnModel().getColumn(2);    
    DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
    renderer.setToolTipText("Selecione a situação");
    colSituacao.setCellRenderer(renderer);
    TelaMotivo telaMotivo = new TelaMotivo();
    telaMotivo.setAvaliacaoPedido(this);
    telaMotivo.setTipoVisualizacao(1);
    colSituacao.setCellEditor(new DefaultCellEditor(comboSituacao));       
    CellColuna = new ColunaBotao(jtbAvaliacaoPedido, 8, telaMotivo, TelaPrincipal, listaItens);    
    //jtbAvaliacaoPedido.setDefaultEditor(Color.class, new ColunaBotao(telaMotivo));        
}
    private void InstaciaTelaPedido() {
        telaPedido = new TelaPedido();
        telaPedido.setTipoVisualizacao(1);
        telaPedido.setTelaAvaliacao(this);
        //super.TituloTela = "Produto";
        telaPedido.setDesktopPane(TelaPrincipal);
        CriarTelaInterna(telaPedido);
    }  
    
    public void setarCampos(String id, String situacao, String data, String fornecedor) {
        jtfPedido.setText(id);
        edDescSituacao.setText(situacao);
        edDescEntrega.setText(data);
        edDescFornecedor.setText(fornecedor);
    }
    
    public void CriarTelaInterna(Object Tela){
        EscreverMetodosAbstratosTelasInternas();
        CarregarTelaInterna(telaInterna, " Motivo ");                
        CarregarTela(Tela); 
    }
    
 private void EscreverMetodosAbstratosTelasInternas() {
        telaInterna = new TelaInterna(){

            @Override
            public void EventoFechar() {
                //HabilitaForm();               
            }

            @Override
            public void EventoAbrir() {
                //DesabilitaForm();
            }
        };
    }       
 
     protected void CarregarTelaInterna(TelaInterna interna, String titulo){
        interna.setTitle(titulo);
        interna.setResizable(true);
        interna.setClosable(true);
        interna.setMaximizable(false);
        interna.setIconifiable(false);
        interna.setSize(700,600);       
        interna.setLocation(Funcoes.CentralizarFrame(interna.getSize()));
        //return jifTela;
    }
     
    private void CarregarTela(Object Tela){
      ((JPanel)Tela).setVisible(true);
        //telaContatoFornecedor.setJTextRetorno(jtfTela);
        ((TelaAncestral)Tela).setFrameInterno(telaInterna);
        telaInterna.add(((JPanel)Tela));
        TelaPrincipal.add(telaInterna);
        telaInterna.setVisible(true);         
    }     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField edDescEntrega;
    private javax.swing.JTextField edDescFornecedor;
    private javax.swing.JTextField edDescSituacao;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtAlterar;
    private javax.swing.JButton jbtCancelarItem;
    private javax.swing.JButton jbtGerarArquivo;
    private javax.swing.JButton jbtPedido;
    private javax.swing.JButton jbtPesquisar;
    private javax.swing.JButton jbtReenviar;
    private javax.swing.JButton jbtSalvar;
    private javax.swing.JLabel jlbTitulo;
    private javax.swing.JTable jtbAvaliacaoPedido;
    private javax.swing.JTextField jtfPedido;
    // End of variables declaration//GEN-END:variables

}
